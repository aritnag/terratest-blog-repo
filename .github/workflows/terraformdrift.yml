# name: 'Terraform Configuration Drift Detection'

# on:
#   workflow_dispatch: 
#     inputs:
#       account_type:
#         type: choice
#         description: Type of Account
#         options: 
#         - DEV
#         - REL
#   schedule:
#     - cron: '41 3 * * *' # runs nightly at 3:41 am
# #Special permissions required for OIDC authentication
# permissions:
#   id-token: write
#   contents: read
#   issues: write
# env:
#   AWS_REGION : "eu-north-1"

# jobs:
#   terraform-plan:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./infrastructure/code
#     outputs:
#       tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3
#     - name: Setup Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.8' 
#     - name: configure aws credentials
#       uses: aws-actions/configure-aws-credentials@v1.7.0
#       with:
#         role-to-assume: ${{ github.event.inputs.account_type == 'DEV' && secrets.UT_ROLE_NAME_DEV || secrets.UT_ROLE_NAME_REL }}
#         role-session-name: GitHub_to_AWS_via_FederatedOIDC
#         aws-region: ${{ env.AWS_REGION }}
#     # Install the latest version of the Terraform CLI
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_wrapper: false

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ${{ github.event.inputs.account_type == 'DEV' && './infrastructure/code/environments/dev' || './infrastructure/code/environments/release' }}
#       run: terraform init

#     # Generates an execution plan for Terraform
#     # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
#     - name: Terraform Plan
#       working-directory: ${{ github.event.inputs.account_type == 'DEV' && './infrastructure/code/environments/dev' || './infrastructure/code/environments/release' }}
#       id: tf-plan
#       run: |
#         export TF_RECREATE_MISSING_LAMBDA_PACKAGE=false
#         export exitcode=0
#         terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        
#         echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
#         if [ $exitcode -eq 1 ]; then
#           echo Terraform Plan Failed!
#           exit 1
#         else 
#           exit 0
#         fi
        
#     # Save plan to artifacts  
#     - name: Publish Terraform Plan
#       uses: actions/upload-artifact@v3
#       with:
#         name: tfplan
#         path: tfplan
        
#     # Create string output of Terraform Plan
#     - name: Create String Output
#       id: tf-plan-string
#       working-directory: ${{ github.event.inputs.account_type == 'DEV' && './infrastructure/code/environments/dev' || './infrastructure/code/environments/release' }}
#       run: |
#         TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
#         delimiter="$(openssl rand -hex 8)"
#         echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
#         echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
#         echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
#         echo "" >> $GITHUB_OUTPUT
#         echo '```terraform' >> $GITHUB_OUTPUT
#         echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
#         echo '```' >> $GITHUB_OUTPUT
#         echo "</details>" >> $GITHUB_OUTPUT
#         echo "${delimiter}" >> $GITHUB_OUTPUT
        
#     # Publish Terraform Plan as task summary
#     - name: Publish Terraform Plan to Task Summary
#       env:
#         SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
#       working-directory: ${{ github.event.inputs.account_type == 'DEV' && './infrastructure/code/environments/dev' || './infrastructure/code/environments/release' }}
#       run: |
#         echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

#     # If changes are detected, create a new issue
#     - name: Publish Drift Report
#       if: steps.tf-plan.outputs.exitcode == 2
#       uses: actions/github-script@v6
#       env:
#         SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
#       with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const body = `${process.env.SUMMARY}`;
#             const title = 'Terraform Configuration Drift Detected';
#             const creator = 'github-actions[bot]'
          
#             // Look to see if there is an existing drift issue
#             const issues = await github.rest.issues.listForRepo({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               state: 'open',
#               creator: creator,
#               title: title
#             })
              
#             if( issues.data.length > 0 ) {
#               // We assume there shouldn't be more than 1 open issue, since we update any issue we find
#               const issue = issues.data[0]
              
#               if ( issue.body == body ) {
#                 console.log('Drift Detected: Found matching issue with duplicate content')
#               } else {
#                 console.log('Drift Detected: Found matching issue, updating body')
#                 github.rest.issues.update({
#                   owner: context.repo.owner,
#                   repo: context.repo.repo,
#                   issue_number: issue.number,
#                   body: body
#                 })
#               }
#             } else {
#               console.log('Drift Detected: Creating new issue')

#               github.rest.issues.create({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 title: title,
#                 body: body
#              })
#             }
            
#     # If changes aren't detected, close any open drift issues
#     - name: Publish Drift Report
#       if: steps.tf-plan.outputs.exitcode == 0
#       uses: actions/github-script@v6
#       with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const title = 'Terraform Configuration Drift Detected';
#             const creator = 'github-actions[bot]'
          
#             // Look to see if there is an existing drift issue
#             const issues = await github.rest.issues.listForRepo({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               state: 'open',
#               creator: creator,
#               title: title
#             })
              
#             if( issues.data.length > 0 ) {
#               const issue = issues.data[0]
              
#               github.rest.issues.update({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 issue_number: issue.number,
#                 state: 'closed'
#               })
#             } 
             
#     - name: Slack Notification
#       if: steps.tf-plan.outputs.exitcode == 2
#       uses: rtCamp/action-slack-notify@v2
#       env:
#         SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
#         SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#         SLACK_ICON: https://github.com/github.png?size=460
#         SLACK_MESSAGE: |
#           ${{ steps.tf-plan-string.outputs.summary }} :rocket:
#         SLACK_TITLE: Infrastructure Changes Notification
#         SLACK_USERNAME: GithubActionSlackBot
#         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#     # Mark the workflow as failed if drift detected 
#     - name: Error on Failure
#       if: steps.tf-plan.outputs.exitcode == 2
#       run: exit 1